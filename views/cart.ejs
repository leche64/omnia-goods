<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('./partials/head.ejs') %>
  </head>
  <body>
    <div class="form-container">
      <div class="header-container">
        <%- include('./partials/headerText.ejs') %>
      </div>
      <div class="container-shopping-cart">
        <h1 class="heading">
          <ion-icon name="cart-outline"></ion-icon> Shopping Cart
        </h1>

        <div class="item-flex">
          <!--
             - checkout section
            -->
          <section class="checkout">
            <form id="payment-form">
              <div class="credit-card-container"></div>
              <button id="card-button" type="button">
                Pay $<%=orderTotal%>
              </button>
            </form>
            <div id="payment-status-container"></div>
          </section>

          <!--
              - cart section
            -->
          <section class="cart">
            <div class="cart-item-box">
              <h2 class="section-heading">Order Summary</h2>
              <% for (var i = 0; i < order.length; i++) { %>
              <div class="product-card">
                <div class="product-card-body">
                  <div class="img-box">
                    <img
                      src="<%= order[i].img %>"
                      width="80px"
                      class="product-img"
                    />
                  </div>
                  <div class="detail">
                    <h4 class="product-name">
                      <%= order[i].description %> - <%= order[i].weight %>
                    </h4>
                    <div class="wrapper">
                      <div class="product-qty">
                        <button id="decrement">
                          <ion-icon name="remove-outline"></ion-icon>
                        </button>

                        <span id="quantity">1</span>

                        <button id="increment">
                          <ion-icon name="add-outline"></ion-icon>
                        </button>
                      </div>

                      <div class="price">
                        $ <span id="price"><%= order[i].price %></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <% } %>
            </div>

            <div class="wrapper">
              <div class="discount-token">
                <label for="discount-token" class="label-default"
                  >Discount code</label
                >
                <div class="wrapper-flex">
                  <input
                    type="text"
                    name="discount-token"
                    id="discount-token"
                    class="input-default"
                  />
                  <button class="btn btn-outline">Apply</button>
                </div>
              </div>

              <div class="amount">
                <div class="subtotal">
                  <span>Subtotal</span>
                  <span>$ <span id="subtotal"><%=subTotal%></span></span>
                </div>

                <div class="tax">
                  <span>Tax</span>
                  <span>$ <span id="tax"><%=taxTotal%></span></span>
                </div>

                <div class="shipping">
                  <span>Delivery Fee</span>
                  <span>$ <span id="delivery"><%=deliveryTotal%></span></span>
                </div>

                <div class="total">
                  <span>Total</span>
                  <span>$ <span id="total"><%=orderTotal%></span></span>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
    <%- include('./partials/footer.ejs') %>
    <script>
      "use strict";

      // all initial elements
      const payAmountBtn = document.querySelector("#payAmount");
      const decrementBtn = document.querySelectorAll("#decrement");
      const quantityElem = document.querySelectorAll("#quantity");
      const incrementBtn = document.querySelectorAll("#increment");
      const priceElem = document.querySelectorAll("#price");
      const subtotalElem = document.querySelector("#subtotal");
      const taxElem = document.querySelector("#tax");
      const totalElem = document.querySelector("#total");

      // loop: for add event on multiple `increment` & `decrement` button
      for (let i = 0; i < incrementBtn.length; i++) {
        incrementBtn[i].addEventListener("click", function () {
          // collect the value of `quantity` textContent,
          // based on clicked `increment` button sibling.
          let increment = Number(this.previousElementSibling.textContent);

          // plus `increment` variable value by 1
          increment++;

          // show the `increment` variable value on `quantity` element
          // based on clicked `increment` button sibling.
          this.previousElementSibling.textContent = increment;

          totalCalc();
        });

        decrementBtn[i].addEventListener("click", function () {
          // collect the value of `quantity` textContent,
          // based on clicked `decrement` button sibling.
          let decrement = Number(this.nextElementSibling.textContent);

          // minus `decrement` variable value by 1 based on condition
          decrement <= 1 ? 1 : decrement--;

          // show the `decrement` variable value on `quantity` element
          // based on clicked `decrement` button sibling.
          this.nextElementSibling.textContent = decrement;

          totalCalc();
        });
      }

      // function: for calculating total amount of product price
      const totalCalc = function () {
        // declare all initial variable
        const tax = 0.05;
        let subtotal = 0;
        let totalTax = 0;
        let total = 0;

        // loop: for calculating `subtotal` value from every single product
        for (let i = 0; i < quantityElem.length; i++) {
          subtotal +=
            Number(quantityElem[i].textContent) *
            Number(priceElem[i].textContent);
        }

        // show the `subtotal` variable value on `subtotalElem` element
        subtotalElem.textContent = subtotal.toFixed(2);

        // calculating the `totalTax`
        totalTax = subtotal * tax;

        // show the `totalTax` on `taxElem` element
        taxElem.textContent = totalTax.toFixed(2);

        // calcualting the `total`
        total = subtotal + totalTax;

        // show the `total` variable value on `totalElem` & `payAmountBtn` element
        totalElem.textContent = total.toFixed(2);
        payAmountBtn.textContent = total.toFixed(2);
      };
    </script>
    <script
      type="module"
      src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"
    ></script>
    <script
      nomodule
      src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"
    ></script>
    <script>
      const appId = "sandbox-sq0idb-sdwrq47LG9rKHbeuAmrYag";
      const locationId = "L0RR6WRKX4EMD";

      async function initializeCard(payments) {
        const card = await payments.card();
        await card.attach(".credit-card-container");
        return card;
      }

      const totalSpan = document.getElementById("total");
      const orderTotal = totalSpan.textContent;

      // Call this function to send a payment token, buyer name, and other details
      // to the project server code so that a payment can be created with
      // Payments API
      async function createPayment(token) {
        const body = JSON.stringify({
          locationId,
          sourceId: token,
          totalAmount: orderTotal,
        });
        const paymentResponse = await fetch("/api/payment/createPayment", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body,
        });
        if (paymentResponse.ok) {
          return paymentResponse.json();
        }
        const errorBody = await paymentResponse.text();
        throw new Error(errorBody);
      }

      // This function tokenizes a payment method.
      // The ‘error’ thrown from this async function denotes a failed tokenization,
      // which is due to buyer error (such as an expired card). It is up to the
      // developer to handle the error and provide the buyer the chance to fix
      // their mistakes.
      async function tokenize(paymentMethod) {
        const tokenResult = await paymentMethod.tokenize();
        if (tokenResult.status === "OK") {
          return tokenResult.token;
        } else {
          let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
          if (tokenResult.errors) {
            errorMessage += ` and errors: ${JSON.stringify(
              tokenResult.errors
            )}`;
          }
          throw new Error(errorMessage);
        }
      }

      // Helper method for displaying the Payment Status on the screen.
      // status is either SUCCESS or FAILURE;
      function displayPaymentResults(status) {
        const statusContainer = document.getElementById(
          "payment-status-container"
        );
        if (status === "SUCCESS") {
          statusContainer.classList.remove("is-failure");
          statusContainer.classList.add("is-success");
        } else {
          statusContainer.classList.remove("is-success");
          statusContainer.classList.add("is-failure");
        }
        statusContainer.style.visibility = "visible";
      }

      document.addEventListener("DOMContentLoaded", async function () {
        if (!window.Square) {
          throw new Error("Square.js failed to load properly");
        }
        const payments = window.Square.payments(appId, locationId);
        let card;
        try {
          card = await initializeCard(payments);
        } catch (e) {
          console.error("Initializing Card failed", e);
          return;
        }

        // Step 5.2: create card payment
        async function handlePaymentMethodSubmission(event, paymentMethod) {
          event.preventDefault();

          try {
            // disable the submit button as we await tokenization and make a
            // payment request.
            cardButton.disabled = true;
            const token = await tokenize(paymentMethod);
            const paymentResults = await createPayment(token);
            displayPaymentResults("SUCCESS");

            console.debug("Payment Success", paymentResults);
          } catch (e) {
            cardButton.disabled = false;
            displayPaymentResults("FAILURE");
            cancelAnimationFrame;
            console.error(e.message);
          }
        }

        const cardButton = document.getElementById("card-button");
        cardButton.addEventListener("click", async function (event) {
          await handlePaymentMethodSubmission(event, card);
        });
      });
    </script>
  </body>
</html>
