<!DOCTYPE html>
<html>
  <head>
    <%- include('./partials/head.ejs') %>
  </head>
  <body>
    <form action="/api/user/verifyLocation/" method="post">
      <div class="card-container-map">
        <div class="panel">
          <div>
            <img
              class="sb-title-icon"
              src="https://fonts.gstatic.com/s/i/googlematerialicons/location_pin/v5/24px.svg"
              alt=""
            />
            <span class="sb-title">Address Selection</span>
          </div>
          <input
            type="text"
            placeholder="Address"
            id="location-input"
            autocomplete="off"
          />
          <input type="text" placeholder="Apt, Suite, etc (optional)" />
          <input type="text" placeholder="City" id="locality-input" />
          <div class="half-input-container">
            <input
              type="text"
              class="half-input"
              placeholder="State/Province"
              id="administrative_area_level_1-input"
            />
            <input
              type="text"
              class="half-input"
              placeholder="Zip/Postal code"
              id="postal_code-input"
            />
          </div>
          <input type="text" placeholder="Country" id="country-input" />
          <button class="button-cta">Checkout</button>
        </div>
        <div class="map" id="gmp-map"></div>
      </div>
    </form>
    <script>
      "use strict";

      function initMap() {
        const componentForm = [
          "location",
          "locality",
          "administrative_area_level_1",
          "country",
          "postal_code",
        ];

        // center: { lat: 40.714728, lng: -73.998672 }
        const center = new google.maps.LatLng(
          40.73440183521817,
          -73.99174938195674
        );
        const area = [
          { lat: 40.71997706, lng: -73.97864778 },
          { lat: 40.72417276, lng: -73.99263818 },
          { lat: 40.726612, lng: -73.99937589 },
          { lat: 40.72827064, lng: -74.00263745 },
          { lat: 40.72914872, lng: -74.01044805 },
          { lat: 40.73908253, lng: -74.00965437 },
          { lat: 40.74888625, lng: -74.0069719 },
          { lat: 40.73562015, lng: -73.97581536 },
          { lat: 40.73077477, lng: -73.97409875 },
          { lat: 40.72674209, lng: -73.97384126 },
        ];

        const getFormInputElement = (component) =>
          document.getElementById(component + "-input");

        const map = new google.maps.Map(document.getElementById("gmp-map"), {
          zoom: 13,
          center: center,
          mapTypeControl: false,
          fullscreenControl: false,
          zoomControl: false,
          streetViewControl: false,
          scrollwheel: false,
        });

        var bounds = new google.maps.LatLngBounds();
        google.maps.event.addListenerOnce(map, "tilesloaded", function (evt) {
          bounds = map.getBounds();
        });

        const polygon = new google.maps.Polygon({
          path: area,
          geodesic: true,
          strokeColor: "#FFd000",
          strokeOpacity: 1.0,
          strokeWeight: 4,
          fillColor: "#FFd000",
          fillOpacity: 0.35,
        });

        polygon.setMap(map);

        const marker = new google.maps.Marker({ map: map, draggable: false });
        const autocompleteInput = getFormInputElement("location");
        const autocomplete = new google.maps.places.Autocomplete(
          autocompleteInput,
          {
            fields: ["address_components", "geometry", "name"],
            types: ["address"],
          }
        );
        autocomplete.addListener("place_changed", function () {
          marker.setVisible(false);
          const place = autocomplete.getPlace();
          var newBounds = new google.maps.LatLngBounds();
          newBounds = bounds;
          if (!place.geometry) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert(
              "No details available for input: '" + place.name + "'"
            );
            return;
          }

          marker.setPosition(place.geometry.location);
          marker.setMap(map);
          newBounds.extend(place.geometry.location);
          map.fitBounds(newBounds);
          if (
            google.maps.geometry.poly.containsLocation(
              place.geometry.location,
              polygon
            )
          ) {
            alert("The area contains the address");
          } else {
            alert("The address is outside of the area.");
          }

          renderAddress(place);
          fillInAddress(place);
        });

        function fillInAddress(place) {
          // optional parameter
          const addressNameFormat = {
            street_number: "short_name",
            route: "long_name",
            locality: "long_name",
            administrative_area_level_1: "short_name",
            country: "long_name",
            postal_code: "short_name",
          };
          const getAddressComp = function (type) {
            for (const component of place.address_components) {
              if (component.types[0] === type) {
                return component[addressNameFormat[type]];
              }
            }
            return "";
          };
          getFormInputElement("location").value =
            getAddressComp("street_number") + " " + getAddressComp("route");
          for (const component of componentForm) {
            // Location field is handled separately above as it has different logic.
            if (component !== "location") {
              getFormInputElement(component).value = getAddressComp(component);
            }
          }
        }

        function renderAddress(place) {
          map.setCenter(place.geometry.location);
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);
        }
      }
    </script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkkbpxFYRO66P23-DFWt5-AX_zpRSk-JE&libraries=places&callback=initMap&solution_channel=GMP_QB_addressselection_v1_cABC"
      async
      defer
    ></script>
  </body>
</html>
