<!DOCTYPE html>
<html>
  <head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0" />
    <meta charset="utf-8" />
    <style>
      body {
        margin: 0;
      }

      .sb-title {
        position: relative;
        top: -12px;
        font-family: Roboto, sans-serif;
        font-weight: 500;
      }

      .sb-title-icon {
        position: relative;
        top: -5px;
      }

      .card-container {
        display: flex;
        height: 500px;
        width: 600px;
      }

      .panel {
        background: white;
        width: 300px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: space-around;
      }

      .half-input-container {
        display: flex;
        justify-content: space-between;
      }

      .half-input {
        max-width: 120px;
      }

      .map {
        width: 300px;
      }

      h2 {
        margin: 0;
        font-family: Roboto, sans-serif;
      }

      input {
        height: 30px;
      }

      input {
        border: 0;
        border-bottom: 1px solid black;
        font-size: 14px;
        font-family: Roboto, sans-serif;
        font-style: normal;
        font-weight: normal;
      }

      input:focus::placeholder {
        color: white;
      }

      .button-cta {
        height: 40px;
        width: 40%;
        background: #3367d6;
        color: white;
        font-size: 15px;
        text-transform: uppercase;
        font-family: Roboto, sans-serif;
        border: 0;
        border-radius: 3px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.48);
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="card-container">
      <div class="panel">
        <div>
          <img
            class="sb-title-icon"
            src="https://fonts.gstatic.com/s/i/googlematerialicons/location_pin/v5/24px.svg"
            alt=""
          />
          <span class="sb-title">Address Selection</span>
        </div>
        <input type="text" placeholder="Address" id="location-input" />
        <input type="text" placeholder="Apt, Suite, etc (optional)" />
        <input type="text" placeholder="City" id="locality-input" />
        <div class="half-input-container">
          <input
            type="text"
            class="half-input"
            placeholder="State/Province"
            id="administrative_area_level_1-input"
          />
          <input
            type="text"
            class="half-input"
            placeholder="Zip/Postal code"
            id="postal_code-input"
          />
        </div>
        <input type="text" placeholder="Country" id="country-input" />
        <button class="button-cta">Checkout</button>
      </div>
      <div class="map" id="gmp-map"></div>
    </div>
    <script>
      "use strict";

      function initMap() {
        const componentForm = [
          "location",
          "locality",
          "administrative_area_level_1",
          "country",
          "postal_code",
        ];

        // center: { lat: 40.714728, lng: -73.998672 }
        const center = new google.maps.LatLng(41.3899621, 2.1469796);
        const area = [
          { lat: 41.3749971, lng: 2.1669979 },
          { lat: 41.3749569, lng: 2.1683179 },
          { lat: 41.3759391, lng: 2.1690059 },
          { lat: 41.3780967, lng: 2.1652293 },
          { lat: 41.3777424, lng: 2.1645641 },
          { lat: 41.380383, lng: 2.1611738 },
          { lat: 41.3820333, lng: 2.1634162 },
          { lat: 41.3837962, lng: 2.1614313 },
          { lat: 41.3956283, lng: 2.1772671 },
          { lat: 41.4000548, lng: 2.1715379 },
          { lat: 41.3973829, lng: 2.16156 },
          { lat: 41.3970609, lng: 2.1603155 },
          { lat: 41.3981555, lng: 2.158041 },
          { lat: 41.3990569, lng: 2.1534061 },
          { lat: 41.400924, lng: 2.1511316 },
          { lat: 41.4019541, lng: 2.1492863 },
          { lat: 41.4015678, lng: 2.1472263 },
          { lat: 41.400087, lng: 2.1439648 },
          { lat: 41.4014068, lng: 2.1419048 },
          { lat: 41.3997651, lng: 2.1375704 },
          { lat: 41.3980911, lng: 2.1330643 },
          { lat: 41.3957088, lng: 2.1283007 },
          { lat: 41.3930689, lng: 2.1241379 },
          { lat: 41.3883039, lng: 2.1270561 },
          { lat: 41.3882556, lng: 2.128129 },
          { lat: 41.3857442, lng: 2.1296847 },
          { lat: 41.3831039, lng: 2.130897 },
          { lat: 41.3805882, lng: 2.1322328 },
          { lat: 41.3769615, lng: 2.1339547 },
          { lat: 41.3761192, lng: 2.1343651 },
          { lat: 41.3753413, lng: 2.1350651 },
          { lat: 41.3751301, lng: 2.1405369 },
          { lat: 41.3750193, lng: 2.1458101 },
          { lat: 41.3747598, lng: 2.1521402 },
          { lat: 41.374651, lng: 2.1585345 },
          { lat: 41.3746349, lng: 2.1606589 },
          { lat: 41.3747476, lng: 2.1653795 },
          { lat: 41.3749971, lng: 2.1669979 },
        ];

        const getFormInputElement = (component) =>
          document.getElementById(component + "-input");

        const map = new google.maps.Map(document.getElementById("gmp-map"), {
          zoom: 13,
          center: center,
          mapTypeControl: false,
          fullscreenControl: false,
          zoomControl: false,
          streetViewControl: false,
          scrollwheel: false,
        });

        var bounds = new google.maps.LatLngBounds();
        google.maps.event.addListenerOnce(map, "tilesloaded", function (evt) {
          bounds = map.getBounds();
        });

        const polygon = new google.maps.Polygon({
          path: area,
          geodesic: true,
          strokeColor: "#FFd000",
          strokeOpacity: 1.0,
          strokeWeight: 4,
          fillColor: "#FFd000",
          fillOpacity: 0.35,
        });

        polygon.setMap(map);

        const marker = new google.maps.Marker({ map: map, draggable: false });
        const autocompleteInput = getFormInputElement("location");
        const autocomplete = new google.maps.places.Autocomplete(
          autocompleteInput,
          {
            fields: ["address_components", "geometry", "name"],
            types: ["address"],
          }
        );
        autocomplete.addListener("place_changed", function () {
          marker.setVisible(false);
          const place = autocomplete.getPlace();
          var newBounds = new google.maps.LatLngBounds();
          newBounds = bounds;
          if (!place.geometry) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert(
              "No details available for input: '" + place.name + "'"
            );
            return;
          }

          marker.setPosition(place.geometry.location);
          marker.setMap(map);
          newBounds.extend(place.geometry.location);
          map.fitBounds(newBounds);
          if (
            google.maps.geometry.poly.containsLocation(
              place.geometry.location,
              polygon
            )
          ) {
            alert("The area contains the address");
          } else {
            alert("The address is outside of the area.");
          }

          renderAddress(place);
          fillInAddress(place);
        });

        function fillInAddress(place) {
          // optional parameter
          const addressNameFormat = {
            street_number: "short_name",
            route: "long_name",
            locality: "long_name",
            administrative_area_level_1: "short_name",
            country: "long_name",
            postal_code: "short_name",
          };
          const getAddressComp = function (type) {
            for (const component of place.address_components) {
              if (component.types[0] === type) {
                return component[addressNameFormat[type]];
              }
            }
            return "";
          };
          getFormInputElement("location").value =
            getAddressComp("street_number") + " " + getAddressComp("route");
          for (const component of componentForm) {
            // Location field is handled separately above as it has different logic.
            if (component !== "location") {
              getFormInputElement(component).value = getAddressComp(component);
            }
          }
        }

        function renderAddress(place) {
          map.setCenter(place.geometry.location);
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);
        }
      }
    </script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkkbpxFYRO66P23-DFWt5-AX_zpRSk-JE&libraries=places&callback=initMap&solution_channel=GMP_QB_addressselection_v1_cABC"
      async
      defer
    ></script>
  </body>
</html>
